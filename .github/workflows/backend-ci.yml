name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.11'
  MYSQL_VERSION: '8.0'
  MYSQL_DATABASE: 'test_healthcare_study'
  MYSQL_ROOT_PASSWORD: 'test_password'
  DATABASE_URL: 'mysql+pymysql://root:test_password@localhost:3306/test_healthcare_study'
  JWT_SECRET: 'test_secret_key_for_ci_32_chars_long_12345'
  MISTRAL_API_KEY: 'test_api_key_for_ci'
  ENVIRONMENT: 'test'
  CORS_ORIGINS: 'http://localhost:3000'
  LLM_PROVIDER: 'mistral'
  PYTHONUNBUFFERED: '1'
  PYTHONDONTWRITEBYTECODE: '1'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --health-start-period=10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements*.txt'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmysqlclient-dev

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-cov pytest-xdist

      - name: Validate environment configuration
        working-directory: backend
        run: |
          echo "üîç Validating environment configurations..."
          python scripts/validate_environment.py --environment test --strict
          python scripts/validate_environment.py --environment development --json
          python scripts/validate_environment.py --environment production --json

      - name: Lint with ruff
        working-directory: backend
        run: |
          pip install ruff
          ruff check .

      - name: Type checking with mypy
        working-directory: backend
        run: |
          pip install mypy
          mypy app --install-types --non-interactive

      - name: Run tests with coverage
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          MISTRAL_API_KEY: ${{ env.MISTRAL_API_KEY }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          CORS_ORIGINS: ${{ env.CORS_ORIGINS }}
          LLM_PROVIDER: ${{ env.LLM_PROVIDER }}
        run: |
          echo "üß™ Running tests with coverage..."
          python -m pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -n auto \
            -v \
            tests/

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/coverage.xml
          retention-days: 7

      - name: Upload HTML coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: backend/htmlcov
          retention-days: 7

      - name: Publish coverage to Codecov
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          fail_ci_if_error: false
          verbose: true
