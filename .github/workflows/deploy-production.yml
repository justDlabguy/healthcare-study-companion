name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy-production.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Environment to deploy to (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Global environment variables
env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    defaults:
      run:
        working-directory: backend
    
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', env.ENVIRONMENT)] }}
      JWT_SECRET: ${{ secrets[format('{0}_JWT_SECRET', env.ENVIRONMENT)] }}
      MISTRAL_API_KEY: ${{ secrets[format('{0}_MISTRAL_API_KEY', env.ENVIRONMENT)] }}
      CORS_ORIGINS: ${{ vars[format('{0}_CORS_ORIGINS', env.ENVIRONMENT)] }}
      LLM_PROVIDER: 'mistral'
      LOG_LEVEL: 'INFO'
      PYTHONUNBUFFERED: '1'
      PYTHONDONTWRITEBYTECODE: '1'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements*.txt'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmysqlclient-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Validate environment configuration
        run: |
          echo "üîç Validating ${{ env.ENVIRONMENT }} environment configuration..."
          python scripts/validate_environment.py --environment ${{ env.ENVIRONMENT }} --strict
          
          if [ $? -ne 0 ]; then
            echo "‚ùå ${{ env.ENVIRONMENT }} environment validation failed!"
            exit 1
          fi
          
          echo "‚úÖ ${{ env.ENVIRONMENT }} environment validation passed"

      - name: Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          python scripts/migration_workflow.py upgrade
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Database migration failed!"
            exit 1
          fi
          
          echo "‚úÖ Database migrations completed successfully"

      - name: Deploy to Railway
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        uses: railwayapp/action@v1
        with:
          service: backend
          environment: ${{ github.event.inputs.environment || 'staging' }}
          token: ${{ secrets.RAILWAY_TOKEN }}
          projectId: ${{ secrets.RAILWAY_PROJECT_ID }}
          
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    defaults:
      run:
        working-directory: frontend
    
    env:
      NODE_ENV: 'production'
      NEXT_TELEMETRY_DISABLED: '1'
      NEXT_PUBLIC_API_URL: ${{ vars[format('{0}_API_URL', github.event.inputs.environment || 'staging')] }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
          
      - name: Deploy to Vercel
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: 'frontend'
          vercel-account: ${{ secrets.VERCEL_ACCOUNT }}
          
  notify:
    name: Notify Deployment Status
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check deployment status
        id: check-status
        run: |
          if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Send Slack notification
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'production'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ steps.check-status.outputs.status == 'success' && '#36a64f' || '#ff0000' }}
          SLACK_TITLE: "Deployment ${{ steps.check-status.outputs.status == 'success' && 'Succeeded' || 'Failed' }}"
          SLACK_MESSAGE: |
            *Environment*: ${{ github.event.inputs.environment || 'staging' }}
            *Status*: ${{ steps.check-status.outputs.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            *Commit*: ${{ github.sha }}
            *Triggered by*: ${{ github.actor }}
            *Workflow*: ${{ github.workflow }}
            *Run URL*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
