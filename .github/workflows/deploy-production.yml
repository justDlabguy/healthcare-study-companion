name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    # These common configurations are moved to the job level to avoid repetition
    defaults:
      run:
        working-directory: backend
    env:
      DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      CORS_ORIGINS: ${{ vars.CORS_ORIGINS }}
      ENVIRONMENT: production
      LLM_PROVIDER: mistral
      EMAIL_ENABLED: ${{ vars.EMAIL_ENABLED || 'false' }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_FROM_EMAIL: ${{ vars.SMTP_FROM_EMAIL }}
      SMTP_SERVER: ${{ vars.SMTP_SERVER }}
      SMTP_PORT: ${{ vars.SMTP_PORT }}
      LOG_LEVEL: INFO
      STRUCTURED_LOGGING: true
      RAILWAY_DEPLOYMENT_ID: ${{ github.run_id }}
      RAILWAY_GIT_COMMIT_SHA: ${{ github.sha }}
      AUTO_ROLLBACK_ON_FAILURE: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      # FIX: Install system dependencies required for building mysqlclient
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libmysqlclient-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate production environment configuration
        run: |
          echo "üîç Validating production environment configuration..."
          python scripts/validate_environment.py --environment production --strict --json
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Production environment validation failed!"
            echo "Please fix configuration issues before deploying."
            exit 1
          fi
          
          echo "‚úÖ Production environment validation passed"

      - name: Validate migration state
        run: |
          echo "üîç Validating migration state before deployment..."
          python scripts/migration_workflow.py validate

      - name: Check for pending migrations
        run: |
          echo "üìã Checking for pending migrations..."
          python scripts/manage_migrations.py current
          python scripts/manage_migrations.py history

      - name: Create pre-deployment backup
        run: |
          echo "üíæ Creating pre-deployment backup..."
          python scripts/manage_migrations.py backup

      - name: Deploy with migrations
        run: |
          echo "üöÄ Starting production deployment with migrations..."
          python scripts/deploy.py

      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying deployment success..."
          python scripts/migration_workflow.py status

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Handle deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Checking rollback options..."
          python scripts/rollback_migrations.py status
          
          echo "Check deployment logs for rollback status"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment failed"
            echo "Please check the deployment logs and consider manual intervention"
          fi
